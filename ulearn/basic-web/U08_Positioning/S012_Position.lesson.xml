<?xml version="1.0"?>
<slide xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
       id="c53a74bb-2764-4448-b4d9-8b9c5c29b984" title="Position" xmlns="https://ulearn.me/schema/v2">
  <markdown>
    Достаточно часто в макетах встречаются блоки, которые расположены поверх всех остальных элементов: какие-то выпадающие меню или всплывающие окна.
    Нередко возникает необходимость размещать декоративные элементы дизайна независимо от основных элементов, чтобы они не влияли и не двигали ничего важного.
    Для такого позиционирования используют css свойство `position`.

    #### Свойство `position`

    Свойство position позволяет управлять расположением элемента при помощи свойств `top`, `bottom`, `right`, `left`, которые задают позицию до границы элемента с соответствующей стороны,
    и `z-index`, который управляет расположением элемента по оси z. Ось z — это ось, перпендикулярная экрану, то есть направление, в котором мы смотрим на экран.
    Ниже рассмотрим некоторые значения свойства `position`.

    #### Обычное позиционирование, `static`

    Значение по умолчанию `static`, что означает обычное позиционирование. У элемента нет специального позиционирования. На него никак не подействуют css свойства `top`, `bottom`, `right`, `left`, `z-index`.

    #### Относительное позиционирование, `relative`

    Элемент продолжает влиять на соседние элементы своими размерами и отступами. Его можно двигать свойствами `top`, `bottom`, `right`, `left`.
    Эти свойства сдвигают блок относительно первоначального местоположения его левого верхнего угла, но, в отличие от действия `margin`, не меняют зарезервированное пространство на странице.

    ![position: relative](img/position-relative.png)

    В примере видно, что позиционирование целиком двигает блок, относительно его начального положения (выделено пунктирной линией).
    Но не заставляет смещаться следующие за ним блоки и сам элемент остался без изменений (занимает всю доступную ему изначально ширину).
    А отступы наоборот отодвигают блок от соседей и все последующие блоки тоже сдвигаются. Так же, блок продолжил занимать доступную ему ширину.

    #### Абсолютное позиционирование, absolute

    Элемент перестает влиять на соседние элементы своими размерами и отступами. Для него больше не выделяется отдельного места на странице, его отношения с соседними элементами остаются только по оси z.
    Он позиционируется также свойствами `top`, `bottom`, `right`, `left`, относительно границ ближайшего родителя, у которого указано свойство position (отличное от `static`).
    Если у блока нет такого родителя,, то он позиционируется относительно  корневого элемента `html`.

    ![position: absolute](img/position-absolute.png)

    Подробнее про эти свойства, а также про **фиксированное позиционирование**, вы можете прочитать в [статье](https://melnik909.gitbooks.io/tutorial-for-beginner-front-end-developer/content/pozitsionirovanie-s-pomoschyu-svoistva-position.html).

    #### Свойство `z-index`

    Если в одном месте на странице находится несколько позиционированных элементов, они могут накладываться друг на друга в определенном порядке, имитируя тем самым ось z.
    По умолчанию выше оказывается тот элемент, что расположен ниже в коде страницы. Изменить порядок наложения элементом можно с помощью свойства `z-index`.
    Выше будет находится тот элемент, у которого значение `z-index` будет больше.
    По умолчанию это свойство равно `auto` и работает только для элементов, у которых значение position отличается от `static`.

    <code language="html">
      &lt;div class="parent"&gt;
        &lt;div class="red"&gt;&lt;/div&gt;
        &lt;div class="yellow"&gt;&lt;/div&gt;
        &lt;div class="green"&gt;&lt;/div&gt;
      &lt;/div&gt;
    </code>

    ![z-index](img/z-index.png)

    В примере слева элементы наложились друг на друга в том порядке, в каком находятся на странице. А справа — видно как их положение изменилось, когда задан z-index, чем он больше - тем ближе к нам элемент.
  </markdown>
</slide>